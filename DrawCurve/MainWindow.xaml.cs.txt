using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace DrawCurve
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private SolidColorBrush smoke = new SolidColorBrush(Color.FromArgb(128, 248, 248, 248));
        private SolidColorBrush solidSmoke = new SolidColorBrush(Color.FromArgb(255, 248, 248, 248));
        private SolidColorBrush blue = new SolidColorBrush(Color.FromArgb(255, 0, 122, 204));

        private Point Origin = new Point(0.5, 0.5);
        private ScaleTransform enlarge = new ScaleTransform();
        private ScaleTransform shrink = new ScaleTransform();
        private Ellipse previewDot, selectedDot;
        private double dotSize = 20;

        private QuadraticHermiteCurve qhc;
        private PointCollection points = new PointCollection();

        private Polyline curve = new Polyline();

        public MainWindow()
        {
            InitializeComponent();
            this.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
            this.Width = 800;
            this.Height = 800;

            enlarge.ScaleX = enlarge.ScaleY = 1.5d;
            shrink.ScaleX = shrink.ScaleY = 1d;

            previewDot = new Ellipse();
            previewDot.Fill = blue;
            previewDot.Width = previewDot.Height = dotSize;


            this.PreviewMouseDown += MainWindow_PreviewMouseDown;
            this.PreviewMouseUp += MainWindow_PreviewMouseUp;
            this.PreviewMouseMove += MainWindow_PreviewMouseMove;
            this.PreviewKeyDown += MainWindow_PreviewKeyDown; 
        }

        void MainWindow_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                this.MainCanvas.Children.Clear();
                this.Close();
            }
        }

        void MainWindow_PreviewMouseMove(object sender, MouseEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
            {
                if (selectedDot != null)
                {
                    this.UpdateDotPosition(e.GetPosition(this.MainCanvas), selectedDot);
                }
                else
                {
                    this.UpdateDotPosition(e.GetPosition(this.MainCanvas), previewDot);
                }
            }
        }

        void MainWindow_PreviewMouseUp(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton.ToString() == "Left")
            {
                if (selectedDot == null)
                {
                    this.MainCanvas.Children.Remove(previewDot);
                    this.AddNewDot(e.GetPosition(this.MainCanvas));
                }
            }
        }

        void UpdateCurve()
        {

        }

        void MainWindow_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
            {
                if (selectedDot == null)
                {
                    this.ShowPreviewDot(e.GetPosition(this.MainCanvas));
                }
            }

            if (e.RightButton == MouseButtonState.Pressed)
            {
                //this.ClearScreen();
                if (points.Count > 1)
                {
                    
                    qhc = new QuadraticHermiteCurve(points[0], points[1], 150d);
                    qhc.CalcCoef();
                    CalcAndDrawCurve(qhc, points);
                }
            }
        }

        void CalcAndDrawCurve(QuadraticHermiteCurve qhc, PointCollection pointList)
        {
            double delta = 0.02d;
            PointCollection lineSegments = new PointCollection();

            lineSegments.Add(pointList[0]);

            for (double i = delta; i < 1; i += delta)
            {
                lineSegments.Add(qhc.GetPoint(i));
            }

            lineSegments.Add(pointList[1]);

            curve.Points = lineSegments;
            curve.Stroke = blue;
            curve.StrokeThickness = 15;
            this.MainCanvas.Children.Add(curve);
        }

        void ShowPreviewDot(Point p)
        {
            this.MainCanvas.Children.Add(previewDot);
            this.UpdateDotPosition(p, previewDot);
        }

        void ClearScreen()
        {
            this.MainCanvas.Children.Clear();
        }

        void AddNewDot(Point p)
        {
            Ellipse e = new Ellipse();
            e.Fill = smoke;
            e.Width = e.Height = dotSize;
            e.MouseEnter += e_MouseEnter;
            e.MouseLeave += e_MouseLeave;

            this.MainCanvas.Children.Add(e);
            this.UpdateDotPosition(p, e);

            points.Add(p);
        }

        void UpdateDotPosition(Point p, Ellipse e)
        {
            Canvas.SetTop(e, p.Y - e.Height / 2d);
            Canvas.SetLeft(e, p.X - e.Width / 2d);
        }

        void e_MouseLeave(object sender, MouseEventArgs e)
        {
            selectedDot = null;
            Ellipse el = sender as Ellipse;
            if (el != null)
            {
                el.Fill = smoke;

                el.RenderTransformOrigin = Origin;
                el.RenderTransform = shrink;
            }
        }

        void e_MouseEnter(object sender, MouseEventArgs e)
        {
            selectedDot = sender as Ellipse;

            if (selectedDot != null)
            {
                selectedDot.Fill = solidSmoke;

                selectedDot.RenderTransformOrigin = Origin;
                selectedDot.RenderTransform = enlarge;
            }
        }


    }
}
